// Code generated by thriftrw v1.0.0
// @generated

package dosa

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"math"
	"strconv"
	"strings"
)

type BadRequestError struct {
	Err       string  `json:"err"`
	Message   *string `json:"message,omitempty"`
	ErrorCode *int32  `json:"errorCode,omitempty"`
}

func (v *BadRequestError) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Err), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.Message != nil {
		w, err = wire.NewValueString(*(v.Message)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.ErrorCode != nil {
		w, err = wire.NewValueI32(*(v.ErrorCode)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *BadRequestError) FromWire(w wire.Value) error {
	var err error
	errIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Err, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				errIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Message = &x
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ErrorCode = &x
				if err != nil {
					return err
				}
			}
		}
	}
	if !errIsSet {
		return errors.New("field Err of BadRequestError is required")
	}
	return nil
}

func (v *BadRequestError) String() string {
	var fields [3]string
	i := 0
	fields[i] = fmt.Sprintf("Err: %v", v.Err)
	i++
	if v.Message != nil {
		fields[i] = fmt.Sprintf("Message: %v", *(v.Message))
		i++
	}
	if v.ErrorCode != nil {
		fields[i] = fmt.Sprintf("ErrorCode: %v", *(v.ErrorCode))
		i++
	}
	return fmt.Sprintf("BadRequestError{%v}", strings.Join(fields[:i], ", "))
}

func (v *BadRequestError) Error() string {
	return v.String()
}

type BadSchemaError struct {
	Reasons map[FQN]string `json:"reasons"`
}

type _Map_FQN_String_MapItemList map[FQN]string

func (m _Map_FQN_String_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		kw, err := k.ToWire()
		if err != nil {
			return err
		}
		vw, err := wire.NewValueString(v), error(nil)
		if err != nil {
			return err
		}
		err = f(wire.MapItem{Key: kw, Value: vw})
		if err != nil {
			return err
		}
	}
	return nil
}

func (m _Map_FQN_String_MapItemList) Size() int {
	return len(m)
}

func (_Map_FQN_String_MapItemList) KeyType() wire.Type {
	return wire.TBinary
}

func (_Map_FQN_String_MapItemList) ValueType() wire.Type {
	return wire.TBinary
}

func (_Map_FQN_String_MapItemList) Close() {
}

func (v *BadSchemaError) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Reasons == nil {
		return w, errors.New("field Reasons of BadSchemaError is required")
	}
	w, err = wire.NewValueMap(_Map_FQN_String_MapItemList(v.Reasons)), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _FQN_Read(w wire.Value) (FQN, error) {
	var x FQN
	err := x.FromWire(w)
	return x, err
}

func _Map_FQN_String_Read(m wire.MapItemList) (map[FQN]string, error) {
	if m.KeyType() != wire.TBinary {
		return nil, nil
	}
	if m.ValueType() != wire.TBinary {
		return nil, nil
	}
	o := make(map[FQN]string, m.Size())
	err := m.ForEach(func(x wire.MapItem) error {
		k, err := _FQN_Read(x.Key)
		if err != nil {
			return err
		}
		v, err := x.Value.GetString(), error(nil)
		if err != nil {
			return err
		}
		o[k] = v
		return nil
	})
	m.Close()
	return o, err
}

func (v *BadSchemaError) FromWire(w wire.Value) error {
	var err error
	reasonsIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TMap {
				v.Reasons, err = _Map_FQN_String_Read(field.Value.GetMap())
				if err != nil {
					return err
				}
				reasonsIsSet = true
			}
		}
	}
	if !reasonsIsSet {
		return errors.New("field Reasons of BadSchemaError is required")
	}
	return nil
}

func (v *BadSchemaError) String() string {
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Reasons: %v", v.Reasons)
	i++
	return fmt.Sprintf("BadSchemaError{%v}", strings.Join(fields[:i], ", "))
}

func (v *BadSchemaError) Error() string {
	return v.String()
}

type BatchReadRequest struct {
	SchemaID     *SchemaID  `json:"schemaID,omitempty"`
	Keys         [][]*Field `json:"keys"`
	FieldsToRead []string   `json:"fieldsToRead"`
}

type _List_Field_ValueList []*Field

func (v _List_Field_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_Field_ValueList) Size() int {
	return len(v)
}

func (_List_Field_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_Field_ValueList) Close() {
}

type _List_List_Field_ValueList [][]*Field

func (v _List_List_Field_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := wire.NewValueList(_List_Field_ValueList(x)), error(nil)
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_List_Field_ValueList) Size() int {
	return len(v)
}

func (_List_List_Field_ValueList) ValueType() wire.Type {
	return wire.TList
}

func (_List_List_Field_ValueList) Close() {
}

type _List_String_ValueList []string

func (v _List_String_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		w, err := wire.NewValueString(x), error(nil)
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_String_ValueList) Size() int {
	return len(v)
}

func (_List_String_ValueList) ValueType() wire.Type {
	return wire.TBinary
}

func (_List_String_ValueList) Close() {
}

func (v *BatchReadRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.SchemaID != nil {
		w, err = v.SchemaID.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Keys != nil {
		w, err = wire.NewValueList(_List_List_Field_ValueList(v.Keys)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.FieldsToRead != nil {
		w, err = wire.NewValueList(_List_String_ValueList(v.FieldsToRead)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _SchemaID_Read(w wire.Value) (*SchemaID, error) {
	var v SchemaID
	err := v.FromWire(w)
	return &v, err
}

func _Field_Read(w wire.Value) (*Field, error) {
	var v Field
	err := v.FromWire(w)
	return &v, err
}

func _List_Field_Read(l wire.ValueList) ([]*Field, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*Field, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _Field_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func _List_List_Field_Read(l wire.ValueList) ([][]*Field, error) {
	if l.ValueType() != wire.TList {
		return nil, nil
	}
	o := make([][]*Field, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _List_Field_Read(x.GetList())
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func _List_String_Read(l wire.ValueList) ([]string, error) {
	if l.ValueType() != wire.TBinary {
		return nil, nil
	}
	o := make([]string, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := x.GetString(), error(nil)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func (v *BatchReadRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.SchemaID, err = _SchemaID_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.Keys, err = _List_List_Field_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TList {
				v.FieldsToRead, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *BatchReadRequest) String() string {
	var fields [3]string
	i := 0
	if v.SchemaID != nil {
		fields[i] = fmt.Sprintf("SchemaID: %v", v.SchemaID)
		i++
	}
	if v.Keys != nil {
		fields[i] = fmt.Sprintf("Keys: %v", v.Keys)
		i++
	}
	if v.FieldsToRead != nil {
		fields[i] = fmt.Sprintf("FieldsToRead: %v", v.FieldsToRead)
		i++
	}
	return fmt.Sprintf("BatchReadRequest{%v}", strings.Join(fields[:i], ", "))
}

type BatchReadResponse struct {
	Results []*EntityOrError `json:"results"`
}

type _List_EntityOrError_ValueList []*EntityOrError

func (v _List_EntityOrError_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_EntityOrError_ValueList) Size() int {
	return len(v)
}

func (_List_EntityOrError_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_EntityOrError_ValueList) Close() {
}

func (v *BatchReadResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Results != nil {
		w, err = wire.NewValueList(_List_EntityOrError_ValueList(v.Results)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _EntityOrError_Read(w wire.Value) (*EntityOrError, error) {
	var v EntityOrError
	err := v.FromWire(w)
	return &v, err
}

func _List_EntityOrError_Read(l wire.ValueList) ([]*EntityOrError, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*EntityOrError, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _EntityOrError_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func (v *BatchReadResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Results, err = _List_EntityOrError_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *BatchReadResponse) String() string {
	var fields [1]string
	i := 0
	if v.Results != nil {
		fields[i] = fmt.Sprintf("Results: %v", v.Results)
		i++
	}
	return fmt.Sprintf("BatchReadResponse{%v}", strings.Join(fields[:i], ", "))
}

type CheckSchemaRequest struct {
	EntityDefs []*EntityDefinition `json:"entityDefs"`
}

type _List_EntityDefinition_ValueList []*EntityDefinition

func (v _List_EntityDefinition_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_EntityDefinition_ValueList) Size() int {
	return len(v)
}

func (_List_EntityDefinition_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_EntityDefinition_ValueList) Close() {
}

func (v *CheckSchemaRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.EntityDefs != nil {
		w, err = wire.NewValueList(_List_EntityDefinition_ValueList(v.EntityDefs)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _EntityDefinition_Read(w wire.Value) (*EntityDefinition, error) {
	var v EntityDefinition
	err := v.FromWire(w)
	return &v, err
}

func _List_EntityDefinition_Read(l wire.ValueList) ([]*EntityDefinition, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*EntityDefinition, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _EntityDefinition_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func (v *CheckSchemaRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.EntityDefs, err = _List_EntityDefinition_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *CheckSchemaRequest) String() string {
	var fields [1]string
	i := 0
	if v.EntityDefs != nil {
		fields[i] = fmt.Sprintf("EntityDefs: %v", v.EntityDefs)
		i++
	}
	return fmt.Sprintf("CheckSchemaRequest{%v}", strings.Join(fields[:i], ", "))
}

type CheckSchemaResponse struct {
	SchemaIDs []*SchemaID `json:"schemaIDs"`
}

type _List_SchemaID_ValueList []*SchemaID

func (v _List_SchemaID_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_SchemaID_ValueList) Size() int {
	return len(v)
}

func (_List_SchemaID_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_SchemaID_ValueList) Close() {
}

func (v *CheckSchemaResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.SchemaIDs != nil {
		w, err = wire.NewValueList(_List_SchemaID_ValueList(v.SchemaIDs)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _List_SchemaID_Read(l wire.ValueList) ([]*SchemaID, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*SchemaID, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _SchemaID_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func (v *CheckSchemaResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.SchemaIDs, err = _List_SchemaID_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *CheckSchemaResponse) String() string {
	var fields [1]string
	i := 0
	if v.SchemaIDs != nil {
		fields[i] = fmt.Sprintf("SchemaIDs: %v", v.SchemaIDs)
		i++
	}
	return fmt.Sprintf("CheckSchemaResponse{%v}", strings.Join(fields[:i], ", "))
}

type ClusteringKey struct {
	Name *string `json:"name,omitempty"`
	Asc  *bool   `json:"asc,omitempty"`
}

func (v *ClusteringKey) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Asc != nil {
		w, err = wire.NewValueBool(*(v.Asc)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ClusteringKey) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.Asc = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ClusteringKey) String() string {
	var fields [2]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	if v.Asc != nil {
		fields[i] = fmt.Sprintf("Asc: %v", *(v.Asc))
		i++
	}
	return fmt.Sprintf("ClusteringKey{%v}", strings.Join(fields[:i], ", "))
}

type Condition struct {
	Op    *Operator `json:"op,omitempty"`
	Field *Field    `json:"field,omitempty"`
}

func (v *Condition) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Op != nil {
		w, err = v.Op.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Field != nil {
		w, err = v.Field.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Operator_Read(w wire.Value) (Operator, error) {
	var v Operator
	err := v.FromWire(w)
	return v, err
}

func (v *Condition) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				var x Operator
				x, err = _Operator_Read(field.Value)
				v.Op = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.Field, err = _Field_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *Condition) String() string {
	var fields [2]string
	i := 0
	if v.Op != nil {
		fields[i] = fmt.Sprintf("Op: %v", *(v.Op))
		i++
	}
	if v.Field != nil {
		fields[i] = fmt.Sprintf("Field: %v", v.Field)
		i++
	}
	return fmt.Sprintf("Condition{%v}", strings.Join(fields[:i], ", "))
}

type CreateRequest struct {
	Entity *Entity `json:"entity,omitempty"`
}

func (v *CreateRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Entity != nil {
		w, err = v.Entity.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Entity_Read(w wire.Value) (*Entity, error) {
	var v Entity
	err := v.FromWire(w)
	return &v, err
}

func (v *CreateRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Entity, err = _Entity_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *CreateRequest) String() string {
	var fields [1]string
	i := 0
	if v.Entity != nil {
		fields[i] = fmt.Sprintf("Entity: %v", v.Entity)
		i++
	}
	return fmt.Sprintf("CreateRequest{%v}", strings.Join(fields[:i], ", "))
}

type CreateScopeRequest struct {
	Name *Scope `json:"name,omitempty"`
}

func (v *CreateScopeRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = v.Name.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Scope_Read(w wire.Value) (Scope, error) {
	var x Scope
	err := x.FromWire(w)
	return x, err
}

func (v *CreateScopeRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x Scope
				x, err = _Scope_Read(field.Value)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *CreateScopeRequest) String() string {
	var fields [1]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	return fmt.Sprintf("CreateScopeRequest{%v}", strings.Join(fields[:i], ", "))
}

type DropScopeRequest struct {
	Name *Scope `json:"name,omitempty"`
}

func (v *DropScopeRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = v.Name.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *DropScopeRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x Scope
				x, err = _Scope_Read(field.Value)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *DropScopeRequest) String() string {
	var fields [1]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	return fmt.Sprintf("DropScopeRequest{%v}", strings.Join(fields[:i], ", "))
}

type ElemType int32

const (
	ElemTypeBool      ElemType = 0
	ElemTypeBlob      ElemType = 1
	ElemTypeString    ElemType = 2
	ElemTypeInt32     ElemType = 3
	ElemTypeInt64     ElemType = 4
	ElemTypeDouble    ElemType = 5
	ElemTypeTimestamp ElemType = 6
	ElemTypeUUID      ElemType = 7
	ElemTypeReserved0 ElemType = 8
	ElemTypeReserved1 ElemType = 9
	ElemTypeReserved2 ElemType = 10
	ElemTypeReserved3 ElemType = 11
)

func (v ElemType) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *ElemType) FromWire(w wire.Value) error {
	*v = (ElemType)(w.GetI32())
	return nil
}

func (v ElemType) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "BOOL"
	case 1:
		return "BLOB"
	case 2:
		return "STRING"
	case 3:
		return "INT32"
	case 4:
		return "INT64"
	case 5:
		return "DOUBLE"
	case 6:
		return "TIMESTAMP"
	case 7:
		return "UUID"
	case 8:
		return "RESERVED0"
	case 9:
		return "RESERVED1"
	case 10:
		return "RESERVED2"
	case 11:
		return "RESERVED3"
	}
	return fmt.Sprintf("ElemType(%d)", w)
}

func (v ElemType) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"BOOL\""), nil
	case 1:
		return ([]byte)("\"BLOB\""), nil
	case 2:
		return ([]byte)("\"STRING\""), nil
	case 3:
		return ([]byte)("\"INT32\""), nil
	case 4:
		return ([]byte)("\"INT64\""), nil
	case 5:
		return ([]byte)("\"DOUBLE\""), nil
	case 6:
		return ([]byte)("\"TIMESTAMP\""), nil
	case 7:
		return ([]byte)("\"UUID\""), nil
	case 8:
		return ([]byte)("\"RESERVED0\""), nil
	case 9:
		return ([]byte)("\"RESERVED1\""), nil
	case 10:
		return ([]byte)("\"RESERVED2\""), nil
	case 11:
		return ([]byte)("\"RESERVED3\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *ElemType) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "ElemType")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "ElemType")
		}
		*v = (ElemType)(x)
		return nil
	case string:
		switch w {
		case "BOOL":
			*v = ElemTypeBool
			return nil
		case "BLOB":
			*v = ElemTypeBlob
			return nil
		case "STRING":
			*v = ElemTypeString
			return nil
		case "INT32":
			*v = ElemTypeInt32
			return nil
		case "INT64":
			*v = ElemTypeInt64
			return nil
		case "DOUBLE":
			*v = ElemTypeDouble
			return nil
		case "TIMESTAMP":
			*v = ElemTypeTimestamp
			return nil
		case "UUID":
			*v = ElemTypeUUID
			return nil
		case "RESERVED0":
			*v = ElemTypeReserved0
			return nil
		case "RESERVED1":
			*v = ElemTypeReserved1
			return nil
		case "RESERVED2":
			*v = ElemTypeReserved2
			return nil
		case "RESERVED3":
			*v = ElemTypeReserved3
			return nil
		default:
			return fmt.Errorf("unknown enum value %q for %q", w, "ElemType")
		}
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "ElemType")
	}
}

type Entity struct {
	SchemaID *SchemaID `json:"schemaID,omitempty"`
	Fields   []*Field  `json:"fields"`
}

func (v *Entity) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.SchemaID != nil {
		w, err = v.SchemaID.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Fields != nil {
		w, err = wire.NewValueList(_List_Field_ValueList(v.Fields)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *Entity) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.SchemaID, err = _SchemaID_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.Fields, err = _List_Field_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *Entity) String() string {
	var fields [2]string
	i := 0
	if v.SchemaID != nil {
		fields[i] = fmt.Sprintf("SchemaID: %v", v.SchemaID)
		i++
	}
	if v.Fields != nil {
		fields[i] = fmt.Sprintf("Fields: %v", v.Fields)
		i++
	}
	return fmt.Sprintf("Entity{%v}", strings.Join(fields[:i], ", "))
}

type EntityDefinition struct {
	Fqn        *FQN         `json:"fqn,omitempty"`
	FieldDescs []*FieldDesc `json:"fieldDescs"`
	PrimaryKey *PrimaryKey  `json:"primaryKey,omitempty"`
}

type _List_FieldDesc_ValueList []*FieldDesc

func (v _List_FieldDesc_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_FieldDesc_ValueList) Size() int {
	return len(v)
}

func (_List_FieldDesc_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_FieldDesc_ValueList) Close() {
}

func (v *EntityDefinition) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Fqn != nil {
		w, err = v.Fqn.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.FieldDescs != nil {
		w, err = wire.NewValueList(_List_FieldDesc_ValueList(v.FieldDescs)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.PrimaryKey != nil {
		w, err = v.PrimaryKey.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _FieldDesc_Read(w wire.Value) (*FieldDesc, error) {
	var v FieldDesc
	err := v.FromWire(w)
	return &v, err
}

func _List_FieldDesc_Read(l wire.ValueList) ([]*FieldDesc, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*FieldDesc, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _FieldDesc_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func _PrimaryKey_Read(w wire.Value) (*PrimaryKey, error) {
	var v PrimaryKey
	err := v.FromWire(w)
	return &v, err
}

func (v *EntityDefinition) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x FQN
				x, err = _FQN_Read(field.Value)
				v.Fqn = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.FieldDescs, err = _List_FieldDesc_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TStruct {
				v.PrimaryKey, err = _PrimaryKey_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *EntityDefinition) String() string {
	var fields [3]string
	i := 0
	if v.Fqn != nil {
		fields[i] = fmt.Sprintf("Fqn: %v", *(v.Fqn))
		i++
	}
	if v.FieldDescs != nil {
		fields[i] = fmt.Sprintf("FieldDescs: %v", v.FieldDescs)
		i++
	}
	if v.PrimaryKey != nil {
		fields[i] = fmt.Sprintf("PrimaryKey: %v", v.PrimaryKey)
		i++
	}
	return fmt.Sprintf("EntityDefinition{%v}", strings.Join(fields[:i], ", "))
}

type EntityOrError struct {
	Entity *Entity `json:"entity,omitempty"`
	Error  *Error  `json:"error,omitempty"`
}

func (v *EntityOrError) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Entity != nil {
		w, err = v.Entity.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Error != nil {
		w, err = v.Error.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if i != 1 {
		return wire.Value{}, fmt.Errorf("EntityOrError should have exactly one field: got %v fields", i)
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Error_Read(w wire.Value) (*Error, error) {
	var v Error
	err := v.FromWire(w)
	return &v, err
}

func (v *EntityOrError) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Entity, err = _Entity_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.Error, err = _Error_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	count := 0
	if v.Entity != nil {
		count++
	}
	if v.Error != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("EntityOrError should have exactly one field: got %v fields", count)
	}
	return nil
}

func (v *EntityOrError) String() string {
	var fields [2]string
	i := 0
	if v.Entity != nil {
		fields[i] = fmt.Sprintf("Entity: %v", v.Entity)
		i++
	}
	if v.Error != nil {
		fields[i] = fmt.Sprintf("Error: %v", v.Error)
		i++
	}
	return fmt.Sprintf("EntityOrError{%v}", strings.Join(fields[:i], ", "))
}

type Error struct {
	ErrCode     *int32  `json:"errCode,omitempty"`
	Msg         *string `json:"msg,omitempty"`
	ShouldRetry *bool   `json:"shouldRetry,omitempty"`
}

func (v *Error) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ErrCode != nil {
		w, err = wire.NewValueI32(*(v.ErrCode)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Msg != nil {
		w, err = wire.NewValueString(*(v.Msg)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.ShouldRetry != nil {
		w, err = wire.NewValueBool(*(v.ShouldRetry)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *Error) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ErrCode = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Msg = &x
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.ShouldRetry = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *Error) String() string {
	var fields [3]string
	i := 0
	if v.ErrCode != nil {
		fields[i] = fmt.Sprintf("ErrCode: %v", *(v.ErrCode))
		i++
	}
	if v.Msg != nil {
		fields[i] = fmt.Sprintf("Msg: %v", *(v.Msg))
		i++
	}
	if v.ShouldRetry != nil {
		fields[i] = fmt.Sprintf("ShouldRetry: %v", *(v.ShouldRetry))
		i++
	}
	return fmt.Sprintf("Error{%v}", strings.Join(fields[:i], ", "))
}

type FQN string

func (v FQN) ToWire() (wire.Value, error) {
	x := (string)(v)
	return wire.NewValueString(x), error(nil)
}

func (v FQN) String() string {
	x := (string)(v)
	return fmt.Sprint(x)
}

func (v *FQN) FromWire(w wire.Value) error {
	x, err := w.GetString(), error(nil)
	*v = (FQN)(x)
	return err
}

type Field struct {
	Name  *string `json:"name,omitempty"`
	Value *Value  `json:"value,omitempty"`
}

func (v *Field) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Value != nil {
		w, err = v.Value.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Value_Read(w wire.Value) (*Value, error) {
	var v Value
	err := v.FromWire(w)
	return &v, err
}

func (v *Field) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TStruct {
				v.Value, err = _Value_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *Field) String() string {
	var fields [2]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	if v.Value != nil {
		fields[i] = fmt.Sprintf("Value: %v", v.Value)
		i++
	}
	return fmt.Sprintf("Field{%v}", strings.Join(fields[:i], ", "))
}

type FieldDesc struct {
	Name *string     `json:"name,omitempty"`
	Type *ElemType   `json:"type,omitempty"`
	Tags []*FieldTag `json:"tags"`
}

type _Set_FieldTag_ValueList []*FieldTag

func (v _Set_FieldTag_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		if x == nil {
			return fmt.Errorf("invalid set item: value is nil")
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _Set_FieldTag_ValueList) Size() int {
	return len(v)
}

func (_Set_FieldTag_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_Set_FieldTag_ValueList) Close() {
}

func (v *FieldDesc) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Type != nil {
		w, err = v.Type.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.Tags != nil {
		w, err = wire.NewValueSet(_Set_FieldTag_ValueList(v.Tags)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ElemType_Read(w wire.Value) (ElemType, error) {
	var v ElemType
	err := v.FromWire(w)
	return v, err
}

func _FieldTag_Read(w wire.Value) (*FieldTag, error) {
	var v FieldTag
	err := v.FromWire(w)
	return &v, err
}

func _Set_FieldTag_Read(s wire.ValueList) ([]*FieldTag, error) {
	if s.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*FieldTag, 0, s.Size())
	err := s.ForEach(func(x wire.Value) error {
		i, err := _FieldTag_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	s.Close()
	return o, err
}

func (v *FieldDesc) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TI32 {
				var x ElemType
				x, err = _ElemType_Read(field.Value)
				v.Type = &x
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TSet {
				v.Tags, err = _Set_FieldTag_Read(field.Value.GetSet())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *FieldDesc) String() string {
	var fields [3]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	if v.Type != nil {
		fields[i] = fmt.Sprintf("Type: %v", *(v.Type))
		i++
	}
	if v.Tags != nil {
		fields[i] = fmt.Sprintf("Tags: %v", v.Tags)
		i++
	}
	return fmt.Sprintf("FieldDesc{%v}", strings.Join(fields[:i], ", "))
}

type FieldTag struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

func (v *FieldTag) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = wire.NewValueString(*(v.Name)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Value != nil {
		w, err = wire.NewValueString(*(v.Value)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *FieldTag) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Value = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *FieldTag) String() string {
	var fields [2]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	if v.Value != nil {
		fields[i] = fmt.Sprintf("Value: %v", *(v.Value))
		i++
	}
	return fmt.Sprintf("FieldTag{%v}", strings.Join(fields[:i], ", "))
}

type InternalServerError struct {
	Err       string  `json:"err"`
	Message   *string `json:"message,omitempty"`
	ErrorCode *int32  `json:"errorCode,omitempty"`
}

func (v *InternalServerError) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Err), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.Message != nil {
		w, err = wire.NewValueString(*(v.Message)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.ErrorCode != nil {
		w, err = wire.NewValueI32(*(v.ErrorCode)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *InternalServerError) FromWire(w wire.Value) error {
	var err error
	errIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Err, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				errIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Message = &x
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ErrorCode = &x
				if err != nil {
					return err
				}
			}
		}
	}
	if !errIsSet {
		return errors.New("field Err of InternalServerError is required")
	}
	return nil
}

func (v *InternalServerError) String() string {
	var fields [3]string
	i := 0
	fields[i] = fmt.Sprintf("Err: %v", v.Err)
	i++
	if v.Message != nil {
		fields[i] = fmt.Sprintf("Message: %v", *(v.Message))
		i++
	}
	if v.ErrorCode != nil {
		fields[i] = fmt.Sprintf("ErrorCode: %v", *(v.ErrorCode))
		i++
	}
	return fmt.Sprintf("InternalServerError{%v}", strings.Join(fields[:i], ", "))
}

func (v *InternalServerError) Error() string {
	return v.String()
}

type Operator int32

const (
	OperatorEq     Operator = 0
	OperatorLt     Operator = 1
	OperatorGt     Operator = 2
	OperatorLtOrEq Operator = 3
	OperatorGtOrEq Operator = 4
)

func (v Operator) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *Operator) FromWire(w wire.Value) error {
	*v = (Operator)(w.GetI32())
	return nil
}

func (v Operator) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "EQ"
	case 1:
		return "LT"
	case 2:
		return "GT"
	case 3:
		return "LT_OR_EQ"
	case 4:
		return "GT_OR_EQ"
	}
	return fmt.Sprintf("Operator(%d)", w)
}

func (v Operator) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"EQ\""), nil
	case 1:
		return ([]byte)("\"LT\""), nil
	case 2:
		return ([]byte)("\"GT\""), nil
	case 3:
		return ([]byte)("\"LT_OR_EQ\""), nil
	case 4:
		return ([]byte)("\"GT_OR_EQ\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *Operator) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "Operator")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "Operator")
		}
		*v = (Operator)(x)
		return nil
	case string:
		switch w {
		case "EQ":
			*v = OperatorEq
			return nil
		case "LT":
			*v = OperatorLt
			return nil
		case "GT":
			*v = OperatorGt
			return nil
		case "LT_OR_EQ":
			*v = OperatorLtOrEq
			return nil
		case "GT_OR_EQ":
			*v = OperatorGtOrEq
			return nil
		default:
			return fmt.Errorf("unknown enum value %q for %q", w, "Operator")
		}
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "Operator")
	}
}

type PrimaryKey struct {
	PartitionKeys  []string         `json:"partitionKeys"`
	ClusteringKeys []*ClusteringKey `json:"clusteringKeys"`
}

type _List_ClusteringKey_ValueList []*ClusteringKey

func (v _List_ClusteringKey_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_ClusteringKey_ValueList) Size() int {
	return len(v)
}

func (_List_ClusteringKey_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_ClusteringKey_ValueList) Close() {
}

func (v *PrimaryKey) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.PartitionKeys != nil {
		w, err = wire.NewValueList(_List_String_ValueList(v.PartitionKeys)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.ClusteringKeys != nil {
		w, err = wire.NewValueList(_List_ClusteringKey_ValueList(v.ClusteringKeys)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ClusteringKey_Read(w wire.Value) (*ClusteringKey, error) {
	var v ClusteringKey
	err := v.FromWire(w)
	return &v, err
}

func _List_ClusteringKey_Read(l wire.ValueList) ([]*ClusteringKey, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*ClusteringKey, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _ClusteringKey_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func (v *PrimaryKey) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.PartitionKeys, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.ClusteringKeys, err = _List_ClusteringKey_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *PrimaryKey) String() string {
	var fields [2]string
	i := 0
	if v.PartitionKeys != nil {
		fields[i] = fmt.Sprintf("PartitionKeys: %v", v.PartitionKeys)
		i++
	}
	if v.ClusteringKeys != nil {
		fields[i] = fmt.Sprintf("ClusteringKeys: %v", v.ClusteringKeys)
		i++
	}
	return fmt.Sprintf("PrimaryKey{%v}", strings.Join(fields[:i], ", "))
}

type RangeRequest struct {
	SchemaID     *SchemaID    `json:"schemaID,omitempty"`
	Token        *Token       `json:"token,omitempty"`
	Limit        *int32       `json:"limit,omitempty"`
	Conditions   []*Condition `json:"conditions"`
	FieldsToRead []string     `json:"fieldsToRead"`
}

type _List_Condition_ValueList []*Condition

func (v _List_Condition_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_Condition_ValueList) Size() int {
	return len(v)
}

func (_List_Condition_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_Condition_ValueList) Close() {
}

func (v *RangeRequest) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.SchemaID != nil {
		w, err = v.SchemaID.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Token != nil {
		w, err = v.Token.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.Limit != nil {
		w, err = wire.NewValueI32(*(v.Limit)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.Conditions != nil {
		w, err = wire.NewValueList(_List_Condition_ValueList(v.Conditions)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}
	if v.FieldsToRead != nil {
		w, err = wire.NewValueList(_List_String_ValueList(v.FieldsToRead)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Token_Read(w wire.Value) (Token, error) {
	var x Token
	err := x.FromWire(w)
	return x, err
}

func _Condition_Read(w wire.Value) (*Condition, error) {
	var v Condition
	err := v.FromWire(w)
	return &v, err
}

func _List_Condition_Read(l wire.ValueList) ([]*Condition, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*Condition, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _Condition_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func (v *RangeRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.SchemaID, err = _SchemaID_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x Token
				x, err = _Token_Read(field.Value)
				v.Token = &x
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Limit = &x
				if err != nil {
					return err
				}
			}
		case 4:
			if field.Value.Type() == wire.TList {
				v.Conditions, err = _List_Condition_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 5:
			if field.Value.Type() == wire.TList {
				v.FieldsToRead, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RangeRequest) String() string {
	var fields [5]string
	i := 0
	if v.SchemaID != nil {
		fields[i] = fmt.Sprintf("SchemaID: %v", v.SchemaID)
		i++
	}
	if v.Token != nil {
		fields[i] = fmt.Sprintf("Token: %v", *(v.Token))
		i++
	}
	if v.Limit != nil {
		fields[i] = fmt.Sprintf("Limit: %v", *(v.Limit))
		i++
	}
	if v.Conditions != nil {
		fields[i] = fmt.Sprintf("Conditions: %v", v.Conditions)
		i++
	}
	if v.FieldsToRead != nil {
		fields[i] = fmt.Sprintf("FieldsToRead: %v", v.FieldsToRead)
		i++
	}
	return fmt.Sprintf("RangeRequest{%v}", strings.Join(fields[:i], ", "))
}

type RangeResponse struct {
	Entities  []*Entity `json:"entities"`
	NextToken *Token    `json:"nextToken,omitempty"`
}

type _List_Entity_ValueList []*Entity

func (v _List_Entity_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_Entity_ValueList) Size() int {
	return len(v)
}

func (_List_Entity_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_Entity_ValueList) Close() {
}

func (v *RangeResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Entities != nil {
		w, err = wire.NewValueList(_List_Entity_ValueList(v.Entities)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.NextToken != nil {
		w, err = v.NextToken.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _List_Entity_Read(l wire.ValueList) ([]*Entity, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*Entity, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _Entity_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func (v *RangeResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Entities, err = _List_Entity_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x Token
				x, err = _Token_Read(field.Value)
				v.NextToken = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RangeResponse) String() string {
	var fields [2]string
	i := 0
	if v.Entities != nil {
		fields[i] = fmt.Sprintf("Entities: %v", v.Entities)
		i++
	}
	if v.NextToken != nil {
		fields[i] = fmt.Sprintf("NextToken: %v", *(v.NextToken))
		i++
	}
	return fmt.Sprintf("RangeResponse{%v}", strings.Join(fields[:i], ", "))
}

type RawValue struct {
	BinaryValue []byte   `json:"binaryValue"`
	BoolValue   *bool    `json:"boolValue,omitempty"`
	DoubleValue *float64 `json:"doubleValue,omitempty"`
	Int32Value  *int32   `json:"int32Value,omitempty"`
	Int64Value  *int64   `json:"int64Value,omitempty"`
	StringValue *string  `json:"stringValue,omitempty"`
}

func (v *RawValue) ToWire() (wire.Value, error) {
	var (
		fields [6]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.BinaryValue != nil {
		w, err = wire.NewValueBinary(v.BinaryValue), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.BoolValue != nil {
		w, err = wire.NewValueBool(*(v.BoolValue)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.DoubleValue != nil {
		w, err = wire.NewValueDouble(*(v.DoubleValue)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.Int32Value != nil {
		w, err = wire.NewValueI32(*(v.Int32Value)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}
	if v.Int64Value != nil {
		w, err = wire.NewValueI64(*(v.Int64Value)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}
	if v.StringValue != nil {
		w, err = wire.NewValueString(*(v.StringValue)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 6, Value: w}
		i++
	}
	if i != 1 {
		return wire.Value{}, fmt.Errorf("RawValue should have exactly one field: got %v fields", i)
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RawValue) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.BinaryValue, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.BoolValue = &x
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TDouble {
				var x float64
				x, err = field.Value.GetDouble(), error(nil)
				v.DoubleValue = &x
				if err != nil {
					return err
				}
			}
		case 4:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Int32Value = &x
				if err != nil {
					return err
				}
			}
		case 5:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Int64Value = &x
				if err != nil {
					return err
				}
			}
		case 6:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.StringValue = &x
				if err != nil {
					return err
				}
			}
		}
	}
	count := 0
	if v.BinaryValue != nil {
		count++
	}
	if v.BoolValue != nil {
		count++
	}
	if v.DoubleValue != nil {
		count++
	}
	if v.Int32Value != nil {
		count++
	}
	if v.Int64Value != nil {
		count++
	}
	if v.StringValue != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("RawValue should have exactly one field: got %v fields", count)
	}
	return nil
}

func (v *RawValue) String() string {
	var fields [6]string
	i := 0
	if v.BinaryValue != nil {
		fields[i] = fmt.Sprintf("BinaryValue: %v", v.BinaryValue)
		i++
	}
	if v.BoolValue != nil {
		fields[i] = fmt.Sprintf("BoolValue: %v", *(v.BoolValue))
		i++
	}
	if v.DoubleValue != nil {
		fields[i] = fmt.Sprintf("DoubleValue: %v", *(v.DoubleValue))
		i++
	}
	if v.Int32Value != nil {
		fields[i] = fmt.Sprintf("Int32Value: %v", *(v.Int32Value))
		i++
	}
	if v.Int64Value != nil {
		fields[i] = fmt.Sprintf("Int64Value: %v", *(v.Int64Value))
		i++
	}
	if v.StringValue != nil {
		fields[i] = fmt.Sprintf("StringValue: %v", *(v.StringValue))
		i++
	}
	return fmt.Sprintf("RawValue{%v}", strings.Join(fields[:i], ", "))
}

type ReadRequest struct {
	SchemaID     *SchemaID `json:"schemaID,omitempty"`
	Key          []*Field  `json:"key"`
	FieldsToRead []string  `json:"fieldsToRead"`
}

func (v *ReadRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.SchemaID != nil {
		w, err = v.SchemaID.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Key != nil {
		w, err = wire.NewValueList(_List_Field_ValueList(v.Key)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.FieldsToRead != nil {
		w, err = wire.NewValueList(_List_String_ValueList(v.FieldsToRead)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ReadRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.SchemaID, err = _SchemaID_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.Key, err = _List_Field_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TList {
				v.FieldsToRead, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ReadRequest) String() string {
	var fields [3]string
	i := 0
	if v.SchemaID != nil {
		fields[i] = fmt.Sprintf("SchemaID: %v", v.SchemaID)
		i++
	}
	if v.Key != nil {
		fields[i] = fmt.Sprintf("Key: %v", v.Key)
		i++
	}
	if v.FieldsToRead != nil {
		fields[i] = fmt.Sprintf("FieldsToRead: %v", v.FieldsToRead)
		i++
	}
	return fmt.Sprintf("ReadRequest{%v}", strings.Join(fields[:i], ", "))
}

type ReadResponse struct {
	Entity *Entity `json:"entity,omitempty"`
}

func (v *ReadResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Entity != nil {
		w, err = v.Entity.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ReadResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Entity, err = _Entity_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ReadResponse) String() string {
	var fields [1]string
	i := 0
	if v.Entity != nil {
		fields[i] = fmt.Sprintf("Entity: %v", v.Entity)
		i++
	}
	return fmt.Sprintf("ReadResponse{%v}", strings.Join(fields[:i], ", "))
}

type RemoveRequest struct {
	Fqn           *FQN       `json:"fqn,omitempty"`
	KeyFieldsList [][]*Field `json:"keyFieldsList"`
}

func (v *RemoveRequest) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Fqn != nil {
		w, err = v.Fqn.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.KeyFieldsList != nil {
		w, err = wire.NewValueList(_List_List_Field_ValueList(v.KeyFieldsList)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RemoveRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x FQN
				x, err = _FQN_Read(field.Value)
				v.Fqn = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.KeyFieldsList, err = _List_List_Field_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *RemoveRequest) String() string {
	var fields [2]string
	i := 0
	if v.Fqn != nil {
		fields[i] = fmt.Sprintf("Fqn: %v", *(v.Fqn))
		i++
	}
	if v.KeyFieldsList != nil {
		fields[i] = fmt.Sprintf("KeyFieldsList: %v", v.KeyFieldsList)
		i++
	}
	return fmt.Sprintf("RemoveRequest{%v}", strings.Join(fields[:i], ", "))
}

type ScanRequest struct {
	SchemaID     *SchemaID `json:"schemaID,omitempty"`
	Token        *Token    `json:"token,omitempty"`
	Limit        *int32    `json:"limit,omitempty"`
	FieldsToRead []string  `json:"fieldsToRead"`
}

func (v *ScanRequest) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.SchemaID != nil {
		w, err = v.SchemaID.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Token != nil {
		w, err = v.Token.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.Limit != nil {
		w, err = wire.NewValueI32(*(v.Limit)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.FieldsToRead != nil {
		w, err = wire.NewValueList(_List_String_ValueList(v.FieldsToRead)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ScanRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.SchemaID, err = _SchemaID_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x Token
				x, err = _Token_Read(field.Value)
				v.Token = &x
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Limit = &x
				if err != nil {
					return err
				}
			}
		case 4:
			if field.Value.Type() == wire.TList {
				v.FieldsToRead, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ScanRequest) String() string {
	var fields [4]string
	i := 0
	if v.SchemaID != nil {
		fields[i] = fmt.Sprintf("SchemaID: %v", v.SchemaID)
		i++
	}
	if v.Token != nil {
		fields[i] = fmt.Sprintf("Token: %v", *(v.Token))
		i++
	}
	if v.Limit != nil {
		fields[i] = fmt.Sprintf("Limit: %v", *(v.Limit))
		i++
	}
	if v.FieldsToRead != nil {
		fields[i] = fmt.Sprintf("FieldsToRead: %v", v.FieldsToRead)
		i++
	}
	return fmt.Sprintf("ScanRequest{%v}", strings.Join(fields[:i], ", "))
}

type ScanResponse struct {
	Entities  []*Entity `json:"entities"`
	NextToken *Token    `json:"nextToken,omitempty"`
}

func (v *ScanResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Entities != nil {
		w, err = wire.NewValueList(_List_Entity_ValueList(v.Entities)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.NextToken != nil {
		w, err = v.NextToken.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *ScanResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Entities, err = _List_Entity_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x Token
				x, err = _Token_Read(field.Value)
				v.NextToken = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *ScanResponse) String() string {
	var fields [2]string
	i := 0
	if v.Entities != nil {
		fields[i] = fmt.Sprintf("Entities: %v", v.Entities)
		i++
	}
	if v.NextToken != nil {
		fields[i] = fmt.Sprintf("NextToken: %v", *(v.NextToken))
		i++
	}
	return fmt.Sprintf("ScanResponse{%v}", strings.Join(fields[:i], ", "))
}

type SchemaID struct {
	Fqn     *FQN     `json:"fqn,omitempty"`
	Version *Version `json:"version,omitempty"`
}

func (v *SchemaID) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Fqn != nil {
		w, err = v.Fqn.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Version != nil {
		w, err = v.Version.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Version_Read(w wire.Value) (Version, error) {
	var x Version
	err := x.FromWire(w)
	return x, err
}

func (v *SchemaID) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x FQN
				x, err = _FQN_Read(field.Value)
				v.Fqn = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TI32 {
				var x Version
				x, err = _Version_Read(field.Value)
				v.Version = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *SchemaID) String() string {
	var fields [2]string
	i := 0
	if v.Fqn != nil {
		fields[i] = fmt.Sprintf("Fqn: %v", *(v.Fqn))
		i++
	}
	if v.Version != nil {
		fields[i] = fmt.Sprintf("Version: %v", *(v.Version))
		i++
	}
	return fmt.Sprintf("SchemaID{%v}", strings.Join(fields[:i], ", "))
}

type Scope string

func (v Scope) ToWire() (wire.Value, error) {
	x := (string)(v)
	return wire.NewValueString(x), error(nil)
}

func (v Scope) String() string {
	x := (string)(v)
	return fmt.Sprint(x)
}

func (v *Scope) FromWire(w wire.Value) error {
	x, err := w.GetString(), error(nil)
	*v = (Scope)(x)
	return err
}

type SearchRequest struct {
	SchemaID     *SchemaID `json:"schemaID,omitempty"`
	Token        *Token    `json:"token,omitempty"`
	Limit        *int32    `json:"limit,omitempty"`
	SearchBy     *Field    `json:"searchBy,omitempty"`
	FieldsToRead []string  `json:"fieldsToRead"`
}

func (v *SearchRequest) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.SchemaID != nil {
		w, err = v.SchemaID.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Token != nil {
		w, err = v.Token.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.Limit != nil {
		w, err = wire.NewValueI32(*(v.Limit)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.SearchBy != nil {
		w, err = v.SearchBy.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}
	if v.FieldsToRead != nil {
		w, err = wire.NewValueList(_List_String_ValueList(v.FieldsToRead)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *SearchRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.SchemaID, err = _SchemaID_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x Token
				x, err = _Token_Read(field.Value)
				v.Token = &x
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Limit = &x
				if err != nil {
					return err
				}
			}
		case 4:
			if field.Value.Type() == wire.TStruct {
				v.SearchBy, err = _Field_Read(field.Value)
				if err != nil {
					return err
				}
			}
		case 5:
			if field.Value.Type() == wire.TList {
				v.FieldsToRead, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *SearchRequest) String() string {
	var fields [5]string
	i := 0
	if v.SchemaID != nil {
		fields[i] = fmt.Sprintf("SchemaID: %v", v.SchemaID)
		i++
	}
	if v.Token != nil {
		fields[i] = fmt.Sprintf("Token: %v", *(v.Token))
		i++
	}
	if v.Limit != nil {
		fields[i] = fmt.Sprintf("Limit: %v", *(v.Limit))
		i++
	}
	if v.SearchBy != nil {
		fields[i] = fmt.Sprintf("SearchBy: %v", v.SearchBy)
		i++
	}
	if v.FieldsToRead != nil {
		fields[i] = fmt.Sprintf("FieldsToRead: %v", v.FieldsToRead)
		i++
	}
	return fmt.Sprintf("SearchRequest{%v}", strings.Join(fields[:i], ", "))
}

type SearchResponse struct {
	Entities  []*Entity `json:"entities"`
	NextToken *Token    `json:"nextToken,omitempty"`
}

func (v *SearchResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Entities != nil {
		w, err = wire.NewValueList(_List_Entity_ValueList(v.Entities)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.NextToken != nil {
		w, err = v.NextToken.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *SearchResponse) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Entities, err = _List_Entity_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x Token
				x, err = _Token_Read(field.Value)
				v.NextToken = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *SearchResponse) String() string {
	var fields [2]string
	i := 0
	if v.Entities != nil {
		fields[i] = fmt.Sprintf("Entities: %v", v.Entities)
		i++
	}
	if v.NextToken != nil {
		fields[i] = fmt.Sprintf("NextToken: %v", *(v.NextToken))
		i++
	}
	return fmt.Sprintf("SearchResponse{%v}", strings.Join(fields[:i], ", "))
}

type Token string

func (v Token) ToWire() (wire.Value, error) {
	x := (string)(v)
	return wire.NewValueString(x), error(nil)
}

func (v Token) String() string {
	x := (string)(v)
	return fmt.Sprint(x)
}

func (v *Token) FromWire(w wire.Value) error {
	x, err := w.GetString(), error(nil)
	*v = (Token)(x)
	return err
}

type TruncateScopeRequest struct {
	Name *Scope `json:"name,omitempty"`
}

func (v *TruncateScopeRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Name != nil {
		w, err = v.Name.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *TruncateScopeRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x Scope
				x, err = _Scope_Read(field.Value)
				v.Name = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *TruncateScopeRequest) String() string {
	var fields [1]string
	i := 0
	if v.Name != nil {
		fields[i] = fmt.Sprintf("Name: %v", *(v.Name))
		i++
	}
	return fmt.Sprintf("TruncateScopeRequest{%v}", strings.Join(fields[:i], ", "))
}

type UpsertRequest struct {
	Entities       []*Entity `json:"entities"`
	FieldsToUpdate []string  `json:"fieldsToUpdate"`
}

func (v *UpsertRequest) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Entities != nil {
		w, err = wire.NewValueList(_List_Entity_ValueList(v.Entities)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.FieldsToUpdate != nil {
		w, err = wire.NewValueList(_List_String_ValueList(v.FieldsToUpdate)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *UpsertRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Entities, err = _List_Entity_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.FieldsToUpdate, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *UpsertRequest) String() string {
	var fields [2]string
	i := 0
	if v.Entities != nil {
		fields[i] = fmt.Sprintf("Entities: %v", v.Entities)
		i++
	}
	if v.FieldsToUpdate != nil {
		fields[i] = fmt.Sprintf("FieldsToUpdate: %v", v.FieldsToUpdate)
		i++
	}
	return fmt.Sprintf("UpsertRequest{%v}", strings.Join(fields[:i], ", "))
}

type UpsertSchemaRequest struct {
	EntityDefs []*EntityDefinition `json:"entityDefs"`
}

func (v *UpsertSchemaRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.EntityDefs != nil {
		w, err = wire.NewValueList(_List_EntityDefinition_ValueList(v.EntityDefs)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *UpsertSchemaRequest) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.EntityDefs, err = _List_EntityDefinition_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *UpsertSchemaRequest) String() string {
	var fields [1]string
	i := 0
	if v.EntityDefs != nil {
		fields[i] = fmt.Sprintf("EntityDefs: %v", v.EntityDefs)
		i++
	}
	return fmt.Sprintf("UpsertSchemaRequest{%v}", strings.Join(fields[:i], ", "))
}

type Value struct {
	ElemValue *RawValue `json:"elemValue,omitempty"`
}

func (v *Value) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.ElemValue != nil {
		w, err = v.ElemValue.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if i != 1 {
		return wire.Value{}, fmt.Errorf("Value should have exactly one field: got %v fields", i)
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _RawValue_Read(w wire.Value) (*RawValue, error) {
	var v RawValue
	err := v.FromWire(w)
	return &v, err
}

func (v *Value) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.ElemValue, err = _RawValue_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	count := 0
	if v.ElemValue != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Value should have exactly one field: got %v fields", count)
	}
	return nil
}

func (v *Value) String() string {
	var fields [1]string
	i := 0
	if v.ElemValue != nil {
		fields[i] = fmt.Sprintf("ElemValue: %v", v.ElemValue)
		i++
	}
	return fmt.Sprintf("Value{%v}", strings.Join(fields[:i], ", "))
}

type Version int32

func (v Version) ToWire() (wire.Value, error) {
	x := (int32)(v)
	return wire.NewValueI32(x), error(nil)
}

func (v Version) String() string {
	x := (int32)(v)
	return fmt.Sprint(x)
}

func (v *Version) FromWire(w wire.Value) error {
	x, err := w.GetI32(), error(nil)
	*v = (Version)(x)
	return err
}
